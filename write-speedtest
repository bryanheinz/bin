#!/usr/bin/env python3

"""
This script writes several files to a destination using the dd CLI tool. It'll average and report the write speed to give you an idea of your write speeds.
"""

import re
import sys
import time
import atexit
import pathlib
import argparse
import subprocess


# default how many files to create
TEST_COUNT = 5
# default size of each test file (in MegaBytes)
TEST_SIZE  = 100


def arg_parser():
    parser = argparse.ArgumentParser(
        prog="write-speedtest",
        description=f"""
        Speedtest writing files. This script will write several
        files to a destination to get the average speed of writing that file
        size. By default, it writes {TEST_COUNT}x {TEST_SIZE} MegaByte files.
        """,
        epilog="example: %(prog)s -s 256 -t 10 /Volumes/network-home"
    )
    parser.add_argument('destination', metavar='TEST_PATH', type=pathlib.Path,
        help="The destination to write speed test.")
    # parser.add_argument('-i', '--input', metavar='FILE_PATH',
    #     required=False, default='/dev/zero', type=pathlib.Path,
    #     help="Specify the input file to test writing out. (%(default)s).")
    parser.add_argument('-s', '--size', metavar='[n]',
        required=False, default=TEST_SIZE, type=int,
        help="The file size in megabytes for each test file (%(default)s).")
    parser.add_argument('-t', '--tests', metavar='[n]',
        required=False, default=TEST_COUNT, type=int,
        help="How many test files to write (%(default)s).")
    parser.add_argument('-v', '--verbose', required=False, action='store_true',
        help="Verbose output.")
    return parser.parse_args()

def main():
    count = 0
    times = []
    
    while count < ARGS.tests:
        epoch_now = int(time.time())
        file_path = ARGS.destination / f'_test.{epoch_now}.{count}'
        CREATED_FILES.append(file_path)
        
        # copying from a remote network share to the local computer gives an
        # accurate result the first time, but subsequent runs appear to be using
        # some cache somewhere. commenting out input selection until this is
        # figured out.
        # dd_cmd = [
        #     'dd',
        #     f'if={ARGS.input}',
        #     f'of={file_path}',
        #     'bs=1000000'
        # ]
        # if str(ARGS.input) == '/dev/zero':
        #     dd_cmd.append(f'count={ARGS.size}')
        
        dd_cmd = [
            'dd',
            'if=/dev/zero',
            f'of={file_path}',
            'bs=1000000',
            f'count={ARGS.size}'
        ]
        
        try:
            comp = subprocess.run(
                dd_cmd,
                capture_output=True,
                check=True
            )
        except KeyboardInterrupt:
            # this lets someone break out of the command and get the current
            # speeds if it's taking too long.
            break
        # dd outputs to STDOUT for some reason. hopefully this check will catch if
        # that ever changes or is different on Linux.
        if comp.stdout:
            dd_output = comp.stdout.decode('utf-8').strip()
        else:
            dd_output = comp.stderr.decode('utf-8').strip()
        
        # use regex to find the digits we might care about
        dd_search = re.search(r'(\d+) bytes transferred \D*?(\d+\.?\d+)\D*(\d+)\D*', dd_output)
        bytes_write_speed = dd_search.group(3)
        times.append(bytes_write_speed)
        
        print(f"{count+1}. {bytes_write_speed} bytes a second")
        if ARGS.verbose:
            print(dd_search.group(0), '\n')
        
        file_path.unlink()
        count += 1
    
    total_time = 0
    for i in times:
        total_time += int(i)
    
    raw_average = total_time / len(times)
    # assuming that if it's less than 1000000, then it's in megabits
    if raw_average < 1000000:
        mbyte = round(int(raw_average) / 125000, 2)
        average_mb = f"{mbyte} Mb/s"
    else:
        mbyte = round(int(raw_average) / 1000000, 2)
        average_mb = f"{mbyte} MB/s"
    
    print(f"\nAverage speed: {average_mb}")
    if ARGS.verbose:
        print(f"Average bytes speed: {raw_average}")

@atexit.register
def cleanup():
    for i in CREATED_FILES:
        if i.exists():
            i.unlink()

# size example, 50 = 50MB 500 = 500MB files

if __name__ == '__main__':
    CREATED_FILES = []
    ARGS = arg_parser()
    
    if ARGS.destination.is_dir() is False:
        print("\nThe specified path doesn't appear to be a directory, exiting...")
        sys.exit(1)
    
    print("\n", f"Creating {ARGS.tests}x {ARGS.size} MB files...")
    
    main()
