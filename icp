#!/usr/bin/python
import os
import getpass
import subprocess
from sys import argv

def print_help():
    print("")
    print("This utility converts ICNS files to PNG.")
    print("Usage:\t icp [icns path] [-f] [-o /path/to/]")
    print("Example: icp ~/Downloads/1Password.icns -f -o ~/Documents/icons/")
    print("Options:")
    print("\t-f\t\tSkips ICNS file check and forces the conversion to PNG.")
    print("\t-o [path]\tSpecifies the output path to convert the icon to.")
    print("\t-h\t\tPrints this help document.")
    print("")
    exit()

if '-h' in argv or '--help' in argv or len(argv) == 1:
    print_help()

# get icns input, setuo output path
try:
    icns_path = argv[1]
    root, ext = os.path.splitext(icns_path)
    base_path, file_name = os.path.split(root)
    out_path = root + ".png"
except IndexError:
    print_help()

# verifies if the file exists
if not os.path.exists(icns_path):
    print("\nFile not found.")
    print_help()

# skips ICNS file check if -f is in the arguments
if '-f' not in argv:
    # read the input file, verify it's an icns file
    file = open(icns_path, 'r')
    data = file.readlines()
    file.close()
    if 'icns' not in data[0]:
        print("\nThe supplied file doesn't appear to be an ICNS file.")
        print_help()

# sets up the output file path if -o is specified
if '-o' in argv:
    o_index = argv.index('-o') + 1 # get the specified path index
    out_path = argv[o_index] # get the specified apth
    if '.png' not in out_path: # check if it's a full filename
        out_path = os.path.join(out_path, file_name + '.png') # if it's not a full filename, make it one
    base_path = os.path.split(out_path)[0] # set the new base_path to verify it is writable

# checks if the output folder is accessable
if not os.access(base_path, os.W_OK):
    print("Output path not accessable. Attempting to save to the Desktop.")
    base_path = '/Users/{0}/Desktop'.format(getpass.getuser())
    out_path = os.path.join(base_path, file_name + '.png')

# convert the icns file to png
cmd = ['sips', '-s', 'format', 'png', icns_path, '--out', out_path]
task = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
out, err = task.communicate()
if err:
    print("Errors:\n\t{0}".format(err.strip()))
else:
    print("The PNG icon can be found at {0}.".format(out_path))
