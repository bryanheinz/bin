#!/usr/bin/env python3


"""
Update CloudFlare A records with your external IP.
"""


import os
import json
import getpass
import logging
import pathlib
import requests


class CFSettings:
    """
    This class handles creating and reading settings for this script.
    """
    def __init__(self):
        self.cf_token = '' # CloudFlare Token
        self.push_user_key = '' # Pushover API key
        self.push_app_token = '' # Pushover app token
        self.zones = {} # {'zone.com': ['sub.zone.come']}
        
        self.cf_settings_path = pathlib.Path(
            f'/Users/{getpass.getuser()}/.cf_settings')
        
        if self.cf_settings_path.is_file():
            self.read_settings()
        else:
            self.create_settings()
    
    def create_settings(self):
        """
        This function creates a settings file if one isn't found.
        """
        print("Create a CloudFlare Token")
        print("https://dash.cloudflare.com/profile/api-tokens")
        print("My Profile -> API Tokens -> Create Token -> Edit Zone DNS template")
        print("Permissions: Zone:DNS:Edit")
        print("Zone Resources: Include:All/Specific:[ZONE]")
        self.cf_token = input("Paste CF token > ")
        
        print("\nCreate a Pushover Token")
        print("https://support.pushover.net/i175-how-do-i-get-an-api-or-application-token")
        self.push_user_key = input("Pushover User Key > ")
        self.push_app_token = input("Pushover App Token > ")
        
        print("\nEnter a space separated list of zones.")
        print("E.g. 'example1.com example2.com example3.com'")
        zones_in = input("Zones > ")
        zones = zones_in.strip("'").split(' ')
        
        print("\n Enter a space separated list of domains to update for each zone.")
        print("E.g. 'sub1.example1.com sub2.example1.com example1.com'")
        for z in zones:
            zone_domains_in = input("Domains > ")
            zone_domains = zone_domains_in.strip("'").split(' ')
            self.zones[z] = zone_domains
        
        cf_settings = {
            'cf_token': self.cf_token,
            'push_user_key': self.push_user_key,
            'push_app_token': self.push_app_token,
            'zones': self.zones
        }
        
        with open(self.cf_settings_path, 'w') as file:
            os.chmod(self.cf_settings_path, 0o600)
            json.dump(cf_settings, file)
    
    def read_settings(self):
        """
        This function reads the settings file into memory.
        """
        with open(self.cf_settings_path, 'r') as file:
            settings = json.load(file)
        self.cf_token = settings['cf_token']
        self.push_user_key = settings['push_user_key']
        self.push_app_token = settings['push_app_token']
        self.zones = settings['zones']

class CFAPI:
    """
    This class handles interacting with CloudFlare's API.
    """
    def __init__(self):
        self.base_url = 'https://api.cloudflare.com/client/v4'
        self.headers = {
            'Authorization': f'Bearer {CFS.cf_token}',
            'Content-Type': 'application/json'
        }
        self.zone_info = None
        self.zone_dns = {}
    
    def api_req(self, endpoint, **api_req_args):
        """
        CloudFlare wrapper for _api_req. See _api_req for details.
        """
        url = ''.join([self.base_url, endpoint])
        return _api_req(url, headers=self.headers, **api_req_args)
    
    def cf_get_zone_info(self):
        """
        Returns an array of CloudFlare Zone dictionaries.
        """
        return self.api_req('/zones').get('result', [])
    
    def get_zone_id(self, zone):
        """
        Returns a string of the input zone's ID.
        """
        # Get zone_info if it hadn't been previously gathered.
        if not self.zone_info:
            self.zone_info = self.cf_get_zone_info()
        for result in self.zone_info:
            if result.get('name', '') == zone:
                return result.get('id')
        zone_err = f"Error getting zone ID for {zone}"
        logg.error(zone_err)
        pushover("[ERRORS] CloudFlare DNS", zone_err)
        exit(1)
    
    def cf_get_zone_dns(self, zone):
        """
        Returns an array of zone dictionaries the API key has access to.
        """
        # check if zone_dns is set, return it if it is, otherwise get it
        zone_dns = self.zone_dns.get(zone)
        if zone_dns: return zone_dns
        zone_id = self.get_zone_id(zone)
        zone_dns = self.api_req(
            f'/zones/{zone_id}/dns_records', params={'type':'A'}) \
            .get('result', [])
        self.zone_dns[zone] = zone_dns
        return zone_dns
    
    def get_domain_info(self, zone, domain):
        """
        Returns an array containing a domain's ID and IP address record.
        """
        zone_dns = self.cf_get_zone_dns(zone)
        for d in zone_dns:
            if d.get('name', '') == domain:
                return [d.get('id'), d.get('content')]
        dom_err = f"Error getting domain info for {domain}"
        logg.error(dom_err)
        pushover("[ERRORS] CloudFlare DNS", dom_err)
        exit(1)
    
    def cf_update_dns_record(self, zone, dom_id, domain):
        """
        Update subdomain's A record with your external IP address.
        """
        zone_id = self.get_zone_id(zone)
        data = {
            'type': 'A',
            'name': domain,
            'content': EXTERNAL_IP,
            'ttl': 1
        }
        resp = self.api_req(
            f'/zones/{zone_id}/dns_records/{dom_id}',
            method='PUT',
            jdata=data)
        if resp.get('success'):
            logg.info("Updated %s IP to %s", domain, EXTERNAL_IP)


def setup_logg(log_level):
    """
    This function sets up logging.
    """
    log_path = pathlib.Path(f'/Users/{getpass.getuser()}/Library/Logs/cf.log')
    formatter = logging.Formatter(
        '%(funcName)s:%(lineno)d <%(levelname)s> - %(message)s')
    cHandler = logging.StreamHandler()
    cHandler.setFormatter(formatter)
    fHandler = logging.FileHandler(log_path)
    fHandler.setFormatter(formatter)
    loggy = logging.getLogger('cf')
    loggy.setLevel(log_level)
    loggy.addHandler(cHandler)
    loggy.addHandler(fHandler)
    return loggy

def _api_req(
    url, method='GET', headers=None, params=None, data=None, jdata=None):
    """
    Wrapper function for the Python Requests module.
    
    https://docs.python-requests.org/en/latest/api/
    
    NOTE: this function will cause this script to exit 1 if there's an error
          with the request.
    
    Parameters:
        url      (Str):  The URL for Requests to call.
        method   (Str):  Accepts all Python Requests' methods.
        params   (Dict): URL parameters.
        data     (Dict): Data to send to the API.
        jdata    (Dict): Data to send to the API as JSON data.
    
    Returns:
        response (JSON): a JSON dictionary if the patch was successful.
    """
    # build and send the request
    sesh = requests.Session()
    req = requests.Request(
        method, url, headers=headers, params=params, data=data, json=jdata)
    prepped = sesh.prepare_request(req)
    resp = sesh.send(prepped)
    
    # validate and return the response
    resp_code = resp.status_code
    
    if resp_code != 200:
        resp_txt = resp.text
        logg.error("--- * ---")
        logg.error(resp_txt)
        logg.error("Sent data:\n%s", data)
        logg.error("Error with call: %s", resp_code)
        logg.error("--- * ---")
        if 'pushover' in url:
            logg.error("Error sending push.")
            exit(1)
        pushover(
            "[ERRORS] CloudFlare DNS",
            f"Error making API call.\nURL: {url}\nResponse: {resp_txt}\nCode: {resp_code}"
        )
        exit(1)
    
    return resp.json()

def get_external_ip():
    """
    Checks ifconfig.co to get your external IP.
    """
    req = requests.get('https://ifconfig.co/json')
    ip_data = req.json()
    external_ip = ip_data.get('ip')
    logg.debug("External IP: %s", external_ip)
    return external_ip

def pushover(title, msg):
    """
    Sends a push notification using the Pushover service.
    """
    url = 'https://api.pushover.net/1/messages.json'
    headers = {'Content-type': 'application/x-www-form-urlencoded'}
    data = {
        'user': CFS.push_user_key,
        'token': CFS.push_app_token,
        'title': title,
        'message': msg,
    }
    _api_req(url, method='POST', headers=headers, data=data)

def main():
    """
    The main script function.
    """
    errors = []
    updated_domains = []
    
    # Loop through zones and zone domains, compare IPs, and update if needed.
    for zone in CFS.zones.keys():
        for dom in CFS.zones[zone]:
            try:
                dom_id, dom_ip = CF_API_OBJ.get_domain_info(zone, dom)
                if dom_ip == EXTERNAL_IP: continue
                CF_API_OBJ.cf_update_dns_record(zone, dom_id, dom)
                updated_domains.append(dom)
            except Exception as ee:
                logg.error(ee)
                errors.append(f"{dom}: {ee}")
    
    # If Pushover is configured and there were updates or errors, then build a
    # report and send a push notification.
    if CFS.push_user_key == '' or CFS.push_app_token == '':
        logg.debug("Pushover not configured, skipping.")
        return
    
    if errors == [] and updated_domains == []:
        logg.debug("No changes or errors.")
        return
    
    if errors:
        push_title = "[ERRORS] CloudFlare DNS"
    else:
        push_title = "CloudFlare DNS"
    
    updated_dom_txt = '\n\t'.join(updated_domains)
    update_msg = f"Updated the following domains:\n\t{updated_dom_txt}"
    err_txt = '\n\t'.join(errors)
    err_msg = f"Errors:\n\t{err_txt}"
    
    push_msg = f"{update_msg}\n\n{err_msg}"
    pushover(push_title, push_msg)



CFS = CFSettings()
CF_API_OBJ = CFAPI()

logg = setup_logg(logging.INFO)

EXTERNAL_IP = get_external_ip()


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        logg.error("Undefined error:\n%s", e)
        pushover("[ERRORS] CloudFlare DNS", f"Undefined error:\n{e}")
        exit(1)
