#!/usr/bin/env python

#
# Python 2 and 3 compatible
# Tested with Python v3.9
# Tested on macOS 10.14 - 12
#

import os
import re
import subprocess
from sys import argv


# the file will be saved as 'file_report_path/battery_report_SERIAL.txt'
file_report_path = '/private/tmp'


if '-h' in argv:
    print("Help:")
    print("\t-v for verbose output.")
    exit(0)


def get_arg(item):
    index = argv.index(item) + 1
    return(argv[index])

def termy(cmd):
    out = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    output = out.stdout.read().decode()
    return output

def research(reg, string):
    # this function uses the RegEx search function and returns group 1
    researched = re.search(reg, string)
    try:
        report = researched.group(1)
    except:
        report = None
    return report

def ioreg():
    output = termy(['ioreg', '-c', 'AppleSmartBattery'])
    # legacy split to be compatible with the old method of getting  battery info
    out_split = output.split('\n')
    
    #
    # the way the is stored is different in newer OS'
    # this new method uses regex to find the information
    #
    # get the battery serial
    re_batt_serial = r'\"Serial\"=\"(\w+)\"'
    battery_serial = research(re_batt_serial, output)
    
    # get the battery's design capacity
    re_batt_design_cap = r'\"DesignCapacity\" = (\d+)'
    battery_design_capacity = research(re_batt_design_cap, output)
    
    # get the battery's current max capacity
    re_max_cap = r'\"MaxCapacity\" = (\d+)'
    battery_capacity = research(re_max_cap, output)
    
    # get the battery's cycle count
    re_cycle_count = r'\"CycleCount\" = (\d+)'
    battery_cycle = research(re_cycle_count, output)
    
    if battery_serial is not None and \
        battery_cycle is not None and \
        battery_capacity is not None and \
        battery_design_capacity is not None:
        return battery_serial, \
            battery_cycle, \
            battery_capacity, \
            battery_design_capacity
    
    
    
    for line in out_split:
        if "BatterySerialNumber" in line:
            # old method to get battery serial
            if battery_serial is None:
                battery_serial_line = line
        elif "LegacyBatteryInfo" in line:
            battery_info_line = line
        elif "DesignCapacity" in line:
            try:
                if battery_design_capacity_line:
                    continue
            except:
                battery_design_capacity_line = line
        elif "IOPlatformSerialNumber" in line:
            mac_serial_line = line
    
    # old methods to get battery max capacity and cycle count
    battery_info = battery_info_line.split(',')
    for line in battery_info:
        if "Capacity" in line:
            # old method to get battery max capacity
            if battery_capacity == None:
                battery_capacity = line.split('=')[-1]
                battery_capacity = battery_capacity.replace('}', '')
        elif "Cycle Count" in line:
            # old method to get battery battery cycle count
            if battery_cycle == None:
                battery_cycle = line.split('=')[-1]
                battery_cycle = battery_cycle.replace('}', '').strip()
    
    # old method to get battery serial
    # battery_serial may be None if the OS is older the old method was
    # to get the bettery serial was used
    if battery_serial is None:
        try:
            battery_serial = battery_serial_line.split('"')[-2]
        except:
            battery_serial = "NO SERIAL"
    
    if battery_design_capacity is None:
        battery_design_capacity = battery_design_capacity_line.split(' ')[-1] \
            .strip()
        if ',' in battery_design_capacity:
            bdc_split = battery_design_capacity.split(',')
            for line in bdc_split:
                if 'DesignCapacity' not in line: continue
                battery_design_capacity = line.split('=')[-1]
            battery_design_capacity = battery_design_capacity.replace('}', '')
            battery_design_capacity = battery_design_capacity.replace('{', '')
    return(
        battery_serial,
        battery_cycle,
        battery_capacity,
        battery_design_capacity
    )
            
def system_profiler():
    output = termy(['system_profiler', 'SPPowerDataType'])
    # legacy output split
    out_split = output.split('\n')
    
    # new method for getting the battery condition
    re_batt_condition = r'Condition: (.+)'
    battery_condition = research(re_batt_condition, output)
    if battery_condition is not None:
        return battery_condition
    
    # legacy method for getting the battery condition
    for line in output:
        if "Condition:" in line:
            battery_condition = line
    battery_condition = battery_condition.split(': ')[-1]
    return battery_condition.strip()

def get_mac_serial():
    sys_prof = termy(['system_profiler', 'SPHardwareDataType'])
    # legacy split
    sys_prof_split = sys_prof.split('\n')
    
    # new method for getting the serial
    re_serial = r'Serial.*: (.+)'
    serial = research(re_serial, sys_prof)
    if serial is not None:
        return serial
    
    # legacy method for getting the serial
    for line in sys_prof_split:
        if 'Serial Number (system)' in line:
            serial_line = line.strip()
            serial = serial_line.split(' ')[-1]
    return serial

def capacity_percent(current_capacity, design_capacity):
    capacity_percent = float(current_capacity) / float(design_capacity) * 100
    return "{0:.2f}%".format(capacity_percent)


if '--path' in argv:
    file_report_path = get_arg('--path')
elif '-p' in argv:
    file_report_path = get_arg('-p')


bat_stats = ioreg()
bat_health = capacity_percent(bat_stats[2], bat_stats[3])
bat_condition = system_profiler()
mac_serial = get_mac_serial()

print("Mac:\t\t\t\t{0}".format(mac_serial))
print("Battery serial number:\t\t{0}".format(bat_stats[0]))
print("Battery charge cycle count:\t{0}".format(bat_stats[1]))
print("Battery health percentage:\t{0}".format(bat_health))
print("Battery condition:\t\t{0}".format(bat_condition))
if '-v' in argv:
    print("Battery capacity:\t\t{0}".format(bat_stats[2]))
    print("Battery design capacity:\t{0}".format(bat_stats[3]))

if '-nf' in argv:
    exit(0)

battery_report = """
Mac: {0}
Battery serial number: {1}
Battery charge cycle count: {2}
Battery health percentage: {3}
Battery condition: {4}
Battery capacity: {5}
Battery design capacity {6}
""".format(mac_serial, bat_stats[0], bat_stats[1], bat_health, bat_condition, \
    bat_stats[2], bat_stats[3])

file_name = 'battery_report_{0}.txt'.format(mac_serial)
file_path = os.path.join(file_report_path, file_name)

with open(file_path, 'w') as file:
    file.write(battery_report)

print("\nThe report file can be found at {}".format(file_path))

termy(['open', file_report_path])
